{"version":3,"sources":["../src/health_check_ctrl.js"],"names":["PanelCtrl","moment","_","panelDefaults","mode","healthCheckType","offsetFromUtc","offsetFromUtcMinutes","bgColor","countdownSettings","endCountdownTime","seconds","milliseconds","add","toDate","endText","dateSettings","showDate","dateFormat","fontSize","fontWeight","timeSettings","customFormat","HealthCheckCtrl","$scope","$injector","defaults","panel","Date","events","on","onInitEditMode","bind","onPanelTeardown","render","updateHealthCheck","addEditorTab","$timeout","cancel","nextTickPromise","renderTime","renderCountdown","now","offsetInMinutes","parseInt","utcOffset","date","format","time","getTimeFormat","timeLeft","duration","diff","formattedTimeLeft","asSeconds","previous","years","months","days","hours","minutes","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":"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","file":"health_check_ctrl.js","sourcesContent":["import {PanelCtrl} from 'app/plugins/sdk';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport './css/health-check-panel.css!';\n\nconst panelDefaults = {\n  mode: 'time',\n  healthCheckType: '24 hour',\n  offsetFromUtc: null,\n  offsetFromUtcMinutes: null,\n  bgColor: null,\n  countdownSettings: {\n    endCountdownTime: moment().seconds(0).milliseconds(0).add(1, 'day').toDate(),\n    endText: '00:00:00'\n  },\n  dateSettings: {\n    showDate: false,\n    dateFormat: 'YYYY-MM-DD',\n    fontSize: '20px',\n    fontWeight: 'normal'\n  },\n  timeSettings: {\n    customFormat: 'HH:mm:ss',\n    fontSize: '60px',\n    fontWeight: 'normal'\n  }\n};\n\nexport class HealthCheckCtrl extends PanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.timeSettings, panelDefaults.timeSettings);\n\n    if (!(this.panel.countdownSettings.endCountdownTime instanceof Date)) {\n      this.panel.countdownSettings.endCountdownTime = moment(this.panel.countdownSettings.endCountdownTime).toDate();\n    }\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    this.updateHealthCheck();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/grafana-health-check-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n  updateHealthCheck() {\n    if (this.panel.mode === 'time') {\n      this.renderTime();\n    } else {\n      this.renderCountdown();\n    }\n\n    this.nextTickPromise = this.$timeout(this.updateHealthCheck.bind(this), 1000);\n  }\n\n  renderTime() {\n    let now;\n\n    if (this.panel.offsetFromUtc && this.panel.offsetFromUtcMinutes) {\n      const offsetInMinutes = (parseInt(this.panel.offsetFromUtc, 10) * 60) + parseInt(this.panel.offsetFromUtcMinutes, 10);\n      now = moment().utcOffset(offsetInMinutes);\n    } else if (this.panel.offsetFromUtc && !this.panel.offsetFromUtcMinutes) {\n      now = moment().utcOffset(parseInt(this.panel.offsetFromUtc, 10));\n    } else {\n      now = moment();\n    }\n\n    if (this.panel.dateSettings.showDate) {\n      this.date = now.format(this.panel.dateSettings.dateFormat);\n    }\n\n    this.time = now.format(this.getTimeFormat());\n  }\n\n  getTimeFormat() {\n    if (this.panel.healthCheckType === '24 hour') {\n      return 'HH:mm:ss';\n    }\n\n    if (this.panel.healthCheckType === '12 hour') {\n      return 'h:mm:ss A';\n    }\n\n    return this.panel.timeSettings.customFormat;\n  }\n\n  renderCountdown() {\n    if (!this.panel.countdownSettings.endCountdownTime) {\n      this.time = this.panel.countdownSettings.endText;\n    }\n\n    const now = moment();\n    const timeLeft = moment.duration(moment(this.panel.countdownSettings.endCountdownTime).diff(now));\n    let formattedTimeLeft = '';\n\n    if (timeLeft.asSeconds() <= 0) {\n      this.time = this.panel.countdownSettings.endText;\n      return;\n    }\n\n    var previous = '';\n\n    if (timeLeft.years() > 0) {\n      formattedTimeLeft = timeLeft.years() === 1 ? '1 year, ' : timeLeft.years() + ' years, ';\n      previous = 'years';\n    }\n    if (timeLeft.months() > 0 || previous === 'years') {\n      formattedTimeLeft += timeLeft.months() === 1 ? '1 month, ' : timeLeft.months() + ' months, ';\n      previous = 'month';\n    }\n    if (timeLeft.days() > 0 || previous === 'months') {\n      formattedTimeLeft += timeLeft.days() === 1 ? '1 day, ' : timeLeft.days() + ' days, ';\n      previous = 'days';\n    }\n    if (timeLeft.hours() > 0 || previous === 'days') {\n      formattedTimeLeft += timeLeft.hours() === 1 ? '1 hour, ' : timeLeft.hours() + ' hours, ';\n      previous = 'hours';\n    }\n\n    if (timeLeft.minutes() > 0 || previous === 'hours') {\n      formattedTimeLeft += timeLeft.minutes() === 1 ? '1 minute, ' : timeLeft.minutes() + ' minutes, ';\n    }\n\n    formattedTimeLeft += timeLeft.seconds() === 1 ? '1 second ' : timeLeft.seconds() + ' seconds';\n    this.time = formattedTimeLeft;\n  }\n\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nHealthCheckCtrl.templateUrl = 'module.html';\n"]}