{"version":3,"sources":["../src/health_check_ctrl.js"],"names":["_","PanelCtrl","panelDefaults","checkInterval","healthy","text","bgColor","fontSize","unhealthy","HealthCheckCtrl","$scope","$injector","defaults","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","updateHealthCheck","addEditorTab","$timeout","cancel","nextTickPromise","doHealthCheck","that","request","XMLHttpRequest","open","onload","status","state","onerror","send","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAOA,O;;AACEC,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;AAGHC,mB,GAAgB;AACpBC,uBAAe,IADK;AAEpBC,iBAAS;AACPC,gBAAM,SADC;AAEPC,mBAAS,SAFF;AAGPC,oBAAU;AAHH,SAFW;AAOpBC,mBAAW;AACTH,gBAAM,WADG;AAETC,mBAAS,SAFA;AAGTC,oBAAU;AAHD;AAPS,O;;AAcDE,qB;;;AACnB,iCAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,wIACvBD,MADuB,EACfC,SADe;;AAE7BX,YAAEY,QAAF,CAAW,MAAKC,KAAhB,EAAuBX,aAAvB;;AAEA,gBAAKY,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKI,MAAL,CAAYF,IAAZ,OAApC;;AAEA,gBAAKG,iBAAL;AAR6B;AAS9B;;;;2CAEgB;AACf,iBAAKC,YAAL,CAAkB,SAAlB,EAA6B,uDAA7B,EAAsF,CAAtF;AACD;;;4CAEiB;AAChB,iBAAKC,QAAL,CAAcC,MAAd,CAAqB,KAAKC,eAA1B;AACD;;;8CAEmB;AAClB,iBAAKC,aAAL;AACA,iBAAKD,eAAL,GAAuB,KAAKF,QAAL,CACrB,KAAKF,iBAAL,CAAuBH,IAAvB,CAA4B,IAA5B,CADqB,EAErB,KAAKJ,KAAL,CAAWV,aAFU,CAAvB;AAGD;;;0CAEe;AACd,gBAAMuB,OAAO,IAAb;;AAEA,gBAAMC,UAAU,IAAIC,cAAJ,EAAhB;AACAD,oBAAQE,IAAR,CAAa,MAAb,EAAqB,GAArB,EAA0B,IAA1B;;AAEAF,oBAAQG,MAAR,GAAiB,SAASA,MAAT,GAAkB;AACjC,kBAAIH,QAAQI,MAAR,KAAmB,GAAvB,EAA4B;AAC1BL,qBAAKb,KAAL,CAAWmB,KAAX,GAAmBN,KAAKb,KAAL,CAAWT,OAA9B;AACAsB,qBAAKP,MAAL;AACD,eAHD,MAGO;AACLO,qBAAKb,KAAL,CAAWmB,KAAX,GAAmBN,KAAKb,KAAL,CAAWL,SAA9B;AACAkB,qBAAKP,MAAL;AACD;AACF,aARD;;AAUAQ,oBAAQM,OAAR,GAAkB,SAASA,OAAT,GAAmB;AACnCP,mBAAKb,KAAL,CAAWmB,KAAX,GAAmBN,KAAKb,KAAL,CAAWL,SAA9B;AACAkB,mBAAKP,MAAL;AACD,aAHD;;AAKAQ,oBAAQO,IAAR;AACD;;;+BAEIC,K,EAAOC,I,EAAM;AAAA;;AAChB,iBAAKtB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC7B,kBAAMsB,kBAAkBD,KAAKE,IAAL,CAAU,kBAAV,CAAxB;AACAD,8BAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,OAAK1B,KAAL,CAAWmB,KAAX,CAAiB1B,OAAzD;AACD,aAHD;AAID;;;;QAxD0CL,S;;yBAAxBQ,e;;AA2DrBA,sBAAgB+B,WAAhB,GAA8B,aAA9B","file":"health_check_ctrl.js","sourcesContent":["import _ from 'lodash';\r\nimport { PanelCtrl } from 'app/plugins/sdk'; // eslint-disable-line import/extensions, import/no-extraneous-dependencies\r\nimport './css/health-check-panel.css!'; // eslint-disable-line import/no-webpack-loader-syntax\r\n\r\nconst panelDefaults = {\r\n  checkInterval: 2000,\r\n  healthy: {\r\n    text: 'Healthy',\r\n    bgColor: '#2F8A00',\r\n    fontSize: '60px',\r\n  },\r\n  unhealthy: {\r\n    text: 'Unhealthy',\r\n    bgColor: '#800000',\r\n    fontSize: '60px',\r\n  },\r\n};\r\n\r\nexport default class HealthCheckCtrl extends PanelCtrl {\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n    _.defaults(this.panel, panelDefaults);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\r\n    this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n    this.updateHealthCheck();\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', 'public/plugins/grafana-health-check-panel/editor.html', 2);\r\n  }\r\n\r\n  onPanelTeardown() {\r\n    this.$timeout.cancel(this.nextTickPromise);\r\n  }\r\n\r\n  updateHealthCheck() {\r\n    this.doHealthCheck();\r\n    this.nextTickPromise = this.$timeout(\r\n      this.updateHealthCheck.bind(this),\r\n      this.panel.checkInterval);\r\n  }\r\n\r\n  doHealthCheck() {\r\n    const that = this;\r\n\r\n    const request = new XMLHttpRequest();\r\n    request.open('HEAD', '/', true);\r\n\r\n    request.onload = function onload() {\r\n      if (request.status === 200) {\r\n        that.panel.state = that.panel.healthy;\r\n        that.render();\r\n      } else {\r\n        that.panel.state = that.panel.unhealthy;\r\n        that.render();\r\n      }\r\n    };\r\n\r\n    request.onerror = function onerror() {\r\n      that.panel.state = that.panel.unhealthy;\r\n      that.render();\r\n    };\r\n\r\n    request.send();\r\n  }\r\n\r\n  link(scope, elem) {\r\n    this.events.on('render', () => {\r\n      const $panelContainer = elem.find('.panel-container');\r\n      $panelContainer.css('background-color', this.panel.state.bgColor);\r\n    });\r\n  }\r\n}\r\n\r\nHealthCheckCtrl.templateUrl = 'module.html';\r\n"]}